/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

module tars
{

//Inter module call package header Mic = module interval call
struct StatMicMsgHead
{
      0 require string masterName;       //Main calling module name
      1 require string slaveName;        //Called module name
      2 require string interfaceName;    //Called module interface name
      3 require string masterIp;         //Main calling module ip
      4 require string slaveIp;          //Called module ip
      5 require int slavePort;           //Called module port
      6 require int returnValue;         //return value
      7 optional string slaveSetName;    //Called module set name
      8 optional string slaveSetArea;    //Called module set area name
      9 optional string slaveSetID;      //Called module set group name
      10 optional string tarsVersion;     //Main calling module tars version
};

key[StatMicMsgHead, masterName, slaveName,interfaceName,masterIp,slaveIp,slavePort,returnValue, slaveSetName, slaveSetArea, slaveSetID, tarsVersion];
   
//Inter module call package body protocol
struct StatMicMsgBody
{
      0 require int count;                  //Successful call count
      1 require int timeoutCount;           //Timeout call count
      2 require int execCount;              //Exception call count
                                            //The following fields are used for statistics for successful calls
      3 require map<int,int> intervalCount; //Call count in time interval
      4 require long totalRspTime;          //The total response time is used to calculate the average time
      5 require int maxRspTime;             //Maximum response time
      6 require int minRspTime;             //Minimum response time
};

//Call sampling information between modules
struct StatSampleMsg
{
      0 require string unid;             //Unique id value
      1 require string masterName;       //Main calling module name
      2 require string slaveName;        //Called module name
      3 require string interfaceName;    //Called module interface name
      4 require string masterIp;         //Main calling module ip
      5 require string slaveIp;          //Called module ip
      6 require int depth;               //Depth value
      7 require int width;               //Breadth value
      8 require int parentWidth;         //Parent node breadth value
};

struct ProxyInfo
{
	0 require bool bFromClient;//Whether from the client
};
/**
 *
 * Reporting service interface
 *
 **/
interface StatF
{
      /**
      * Report calling information between modules   Mic = module interval call
      * @param statmsg,             Report information
      * @param bFromServer,         Report source  bFromClient: true （Reporting initiated by the client) false （Reporting initiated by the server)
      * @return int,                Return 0 means success
      */
      int reportMicMsg( map<StatMicMsgHead,StatMicMsgBody> msg, bool bFromClient);
      
      /**
      * Report sampling information between modules   Mic = module interval call
      * @param msg,               Report information
       * @return int,                 Return 0 means success
      */
      int reportSampleMsg(vector<StatSampleMsg> msg);
};

}; 
